
import asyncio
from typing import Coroutine, Dict, Union, Any


class JsonRpcStreamReader(object):
    def __init__(self, rfile: asyncio.StreamReader,
                 loop: asyncio.AbstractEventLoop = None): ...

    def close(self) -> None: ...
    async def listen(self, message_consumer: Coroutine) -> Any: ...
    async def _read_message(self) -> Union[str, None]: ...

    @staticmethod
    def _content_length(line: str) -> Union[int, None]: ...


class JsonRpcStreamWriter(object):
    def __init__(self, wfile: asyncio.StreamWriter,
                 loop: asyncio.AbstractEventLoop = None,
                 **json_dumps_args): ...
    async def close(self) -> None: ...
    async def write(self, message: Dict) -> None: ...
